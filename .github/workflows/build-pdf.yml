name: Build pdf

on:
  workflow_call:
    inputs:
      problems:
        description: 'Problem labels to build (A-Z)'
        default: ''
        type: string
      merge:
        description: 'Merge pdfs?'
        default: false
        type: boolean
      runs-on:
        default: 'ubuntu-latest'
        type: string

jobs:
  pre-build:
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: 3
    outputs:
      problems: ${{ steps.run-problems.outputs.problemsjson }}
      pdf: ${{ steps.run-problems.outputs.problems }}
      lastproblem: ${{ steps.run-problems.outputs.lastproblem }}
    steps:
      - uses: actions/checkout@v3

      - name: Dump input context
        env:
          INPUT_CONTEXT: ${{ toJSON(inputs) }}
        run: echo "$INPUT_CONTEXT"

      - name: Get changes
        if: github.event_name == 'push'
        id: changes
        uses: XiPlus-Test/tps-actions-test/.github/actions/get-changes@main

      - name: Check push
        if: github.event_name == 'push'
        env:
          CHANGES: ${{ steps.changes.outputs.changes }}
        run: |
          echo "$CHANGES"
          echo "REQUEST=${{ fromJson(steps.changes.outputs.changes).pdf }}" >> $GITHUB_ENV

      - name: Check dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "REQUEST=${{ inputs.problems }}" >> $GITHUB_ENV

      - name: Filter problems
        id: run-problems
        uses: XiPlus-Test/tps-actions-test/.github/actions/run-problems@main
        with:
          requests: ${{ env.REQUEST }}

  build-pdf:
    needs: [pre-build]
    if: needs.pre-build.outputs.problems != '[]' || (github.event_name == 'workflow_dispatch' && inputs.merge)
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v3

      - uses: XiPlus-Test/tps-actions-test/.github/actions/install-tps@main
        if: ${{ runner.name == 'Hosted Agent' || startsWith(runner.name, 'GitHub Actions') }}

      - name: Install dependencies
        if: ${{ runner.name == 'Hosted Agent' || startsWith(runner.name, 'GitHub Actions') }}
        run: |
          sudo apt-get update
          wget https://github.com/jgm/pandoc/releases/download/2.10.1/pandoc-2.10.1-1-amd64.deb
          sudo dpkg -i pandoc-2.10.1-1-amd64.deb

          sudo apt-get install texlive-xetex texlive-lang-chinese

          sudo mkdir -p /usr/share/fonts/opentype/noto
          wget -nv https://noto-website-2.storage.googleapis.com/pkgs/NotoSansCJK-Regular.ttc.zip
          unzip NotoSansCJK-Regular.ttc.zip -d NotoSansCJK-Regular
          ls -al NotoSansCJK-Regular
          sudo cp NotoSansCJK-Regular/NotoSansCJK-Regular.ttc /usr/share/fonts/opentype/noto
          wget -nv https://noto-website-2.storage.googleapis.com/pkgs/NotoSansCJK-Bold.ttc.zip
          unzip NotoSansCJK-Bold.ttc.zip -d NotoSansCJK-Bold
          ls -al NotoSansCJK-Bold
          sudo cp NotoSansCJK-Bold/NotoSansCJK-Bold.ttc /usr/share/fonts/opentype/noto
          ls -al /usr/share/fonts/opentype/noto
          sudo fc-cache -f -v

          sudo apt-get install poppler-utils

          sudo python3 -m pip install pillow

          rm -f NotoSansCJK-Bold.ttc.zip
          rm -rf NotoSansCJK-Bold/
          rm -f NotoSansCJK-Regular.ttc.zip
          rm -rf NotoSansCJK-Regular/
          rm -f pandoc-2.10.1-1-amd64.deb

      - name: Check environment
        working-directory: pA
        run: |
          lsb_release -a
          echo ""
          pandoc -v
          echo ""
          xetex -v
          echo ""
          tps || :;
          echo ""
          fc-list | grep "Noto Sans Mono CJK TC" || :;
          echo ""
          pdfunite -v

      - name: Setup git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - uses: XiPlus-Test/tps-actions-test/.github/actions/convert-images@main

      - name: Commit images
        run: |
          git status
          git pull
          git diff-index --quiet HEAD -- || git commit -m "Compress images"
          git push

      - name: Build pdfs
        run: |
          for prob in ${{ needs.pre-build.outputs.pdf }}; do
            echo "Build $prob"
            cd p${prob} && make statement && git add statement/index.pdf && cd ..
          done

      - name: Merge cover into pA
        if: contains(needs.pre-build.outputs.pdf, 'A') && hashFiles('cover.tex') != ''
        run: |
          xelatex cover.tex
          pdfunite cover.pdf pA/statement/index.pdf pA/statement/index-with-cover.pdf
          rm pA/statement/index.pdf
          mv pA/statement/index-with-cover.pdf pA/statement/index.pdf
          git add pA/statement/index.pdf

      - name: Merge appendix into last problem
        if: contains(needs.pre-build.outputs.pdf, needs.pre-build.outputs.lastproblem) && hashFiles('appendix.tex') != ''
        env:
          LASTPROBLEM: p${{ needs.pre-build.outputs.lastproblem }}/statement/index.pdf
          TEMPPATH: p${{ needs.pre-build.outputs.lastproblem }}/statement/index-with-appendix.pdf
        run: |
          xelatex appendix.tex
          pdfunite $LASTPROBLEM appendix.pdf $TEMPPATH
          rm $LASTPROBLEM
          mv $TEMPPATH $LASTPROBLEM
          git add $LASTPROBLEM

      - name: Get problems
        id: all-problems
        uses: XiPlus-Test/tps-actions-test/.github/actions/get-problems@main

      - name: Merge pdfs
        if: (github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && inputs.merge)
        run: |
          make merge-pdfs
          git add pA/attachments/problems.pdf

      - name: Commit pdf
        run: |
          git status
          git pull
          git diff-index --quiet HEAD -- || git commit -m "Build pdfs"
          git push
